shiny::runApp()
remotes::install_github("rstudio/thematic")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("sjPlot")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
remove.packages("sjPlot", lib="~/R/win-library/4.0")
detach("package:sjPlot", unload = TRUE)
runApp()
library(htmltools)
runApp()
shiny::runApp()
install.packages("extrafont")
runApp()
runApp()
runApp()
runApp()
install.packages("echarts4r")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(htmltools)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
remotes::install_github("wilkelab/ggtext")
install.packages("ggcharts")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("showtext")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("backports", "bit", "bit64", "broom", "BTM", "car", "carData", "cpp11", "crfsuite", "crul", "data.table", "dbplyr", "devtools", "diffobj", "dplyr", "DT", "effects", "ellipsis", "float", "fs", "gamlr", "gender", "geojson", "ggplot2", "git2r", "glmnet", "glue", "haven", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "later", "LexisNexisTools", "libcoin", "lsa", "lubridate", "magick", "maptools", "mathpix", "mgsub", "modelr", "mvtnorm", "nloptr", "officer", "openssl", "openxlsx", "padr", "partykit", "pdftools", "phonics", "pillar", "pingr", "pkgbuild", "pkgload", "polspline", "prettydoc", "processx", "promises", "proxy", "ps", "quanteda", "quantreg", "raster", "RcmdrMisc", "Rcpp", "RcppArmadillo", "RcppParallel", "readODS", "rematch2", "remotes", "renv", "reticulate", "rgdal", "RhpcBLASctl", "rJava", "rms", "RNewsflow", "RODBC", "roxygen2", "rversions", "rvest", "scales", "sf", "shiny", "shinycssloaders", "shinytest", "shinyWidgets", "showtext", "skmeans", "sp", "stringdist", "sys", "textdata", "textreuse", "tibble", "tidyr", "tidytext", "tinytest", "tinytex", "usethis", "V8", "vctrs", "vdiffr", "vroom", "xfun", "XML", "xml2", "zip", "zoo"))
library(AlignAssign)
install.packages(c("shiny", "shinycssloaders", "shinyWidgets"))
.libPaths()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("gfonts")
library(gfonts)
get_all_fonts()
setup_font(
id = "indie-flower",
output_dir = "www"
)
use_font("indie-flower", "www/css/indie-flower.css")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggeasy")
runApp()
runApp()
detach("package:ggeasy", unload = TRUE)
runApp()
